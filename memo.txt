chatSocket.onopen = () => 



server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location /static/ {
        root   /var/www/roomii;
    }

    location / {
        root   /var/www/roomii;
        include uwsgi_params;
        proxy_pass http://127.0.0.1:3031/;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

server {
    listen       443 default ssl;
    ssl on;
    ssl_certificate      /etc/letsencrypt/live/roomii.jp/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/roomii.jp/privkey.pem;
    server_name  roomii.jp;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location /static/ {
        root   /var/www/roomii;
    }

    location / {
        root   /var/www/roomii;
        include uwsgi_params;
        proxy_pass http://127.0.0.1:3031/;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

roomii_nginx.conf





from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

from config import *

import os
import sys

from django import *
from django.contrib.messages import *
from django.contrib import *

from django.db import models


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

PROJECT_NAME = os.path.basename(BASE_DIR)

SECRET_KEY = '75c6@w6i1c=xsb$($_117$zk-v!@n*5r9(@tgcj+n=jj+ff*g!'

DEBUG = True

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [

    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'mysite.apps.WebappConfig',
    'mysite',
    # 'social_django',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'social_django.middleware.SocialAuthExceptionMiddleware',
]

# AUTHENTICATION_BACKENDS = [
#     'social_core.backends.open_id.OpenIdAuth',
#     'social_core.backends.google.GoogleOpenId',
#     'social_core.backends.google.GoogleOAuth2',
#     'social_core.backends.google.GoogleOAuth',
#     'django.contrib.auth.backends.ModelBackend',
#     # 'facebook.custom_backends.SettingsBackend',
#     # 'social_core.backends.facebook.FacebookOAuth2',
#
# ]

SESSION_ENGINE = 'django.contrib.sessions.backends.db'


sys.path.append(os.getcwd())

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, "templates")],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    'django.template.context_processors.static',
                    # 'social_django.context_processors.backends',
                    # 'social_django.context_processors.login_redirect',
                ],
            },
        },
    ]

LOGIN_URL = 'register:login'

LOGIN_REDIRECT_URL = 'register:login_after'
LOGOUT_URL = 'register:logout'

sys.path.append(os.getcwd())
WSGI_APPLICATION = 'config.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'roomii_sample',
        'USER': 'root',
        'PASSWORD': 'Asatai951156',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


TIME_ZONE = 'Asia/Tokyo'

LANGUAGE_CODE = 'ja'

USE_I18N = True

USE_L10N = True

USE_TZ = True


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATIC_ROOT = '/var/www/{}/static'.format(PROJECT_NAME)


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AUTH_USER_MODEL = 'mysite.User'

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '991249997158-ns651fs80kdi05dtbaq6e9if081ubq9k.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'eodCVb8XjTTR_sf-41XkJt8g'


FACEBOOK_CALLBACK_URL='http://localhost:8000/auth/complete/facebook/'
# SOCIAL_AUTH_FACEBOOK_APP_NAMESPACE = 'auth'
SOCIAL_AUTH_FACEBOOK_KEY = '292183621408680'
SOCIAL_AUTH_FACEBOOK_SECRET = '1077fcc7e686d3c4ff08fbb05fcc94ab'
# SOCIAL_AUTH_FACEBOOK_SCOPE =  ['email', 'public_profile']
# SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
#   'fields': 'id,name,email'
# }


EMAIL_HOST = 'smtp.muumuu-mail.com'
DEFAULT_FROM_EMAIL = 'official@webapp2.com'
EMAIL_HOST_USER = 'official@webapp2.com'
EMAIL_HOST_PASSWORD = 'asatai951156'
EMAIL_PORT = 587
EMAIL_USE_TLS = False

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'


DATABASE = 'mysql://%s:%s@%s/%s?charset=utf8mb4' % (
    "root",
    "Asatai951156",
    "127.0.0.1:3306",
    "roomii_sample",
)

ENGINE = create_engine(
     DATABASE,
     encoding = "utf8",
     echo=True,
     pool_pre_ping=True
)

session = scoped_session(
    sessionmaker(
        autocommit = False,
        autoflush = False,
        bind = ENGINE
        )
    )

Base = declarative_base()
Base.query = session.query_property()












"""
ajax
"""
{% block extrajs %}

<script>
  // function getCookie(name) {
  //   var cookieValue = null;
  //   if (document.cookie && document.cookie !== '') {
  //     var cookies = document.cookie.split(';');
  //     for (var i = 0; i < cookies.length; i++) {
  //       var cookie = jQuery.trim(cookies[i]);
  //       // Does this cookie string begin with the name we want?
  //       if (cookie.substring(0, name.length + 1) === (name + '=')) {
  //         cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
  //         break;
  //       }
  //     }
  //   }
  //   return cookieValue;
  // }
  //
  // var csrftoken = getCookie('csrftoken');
  //
  // function csrfSafeMethod(method) {
  //     // these HTTP methods do not require CSRF protection
  //     return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
  // }
  //
  // $.ajaxSetup({
  //     beforeSend: function (xhr, settings) {
  //         if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
  //             xhr.setRequestHeader("X-CSRFToken", csrftoken);
  //         }
  //     }
  // });




</script>

{% endblock %}




"""
検索部分, 保存用
"""

# def get_queryset(self):
  #     tmp_list = []

      # if self.request.user.is_staff is False:
      #     object_list = self.model.objects.all().order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', 'live_flag')
      #     tmp_list.append(object_list)
      # else:
      #     object_list = self.model.objects.all().filter(customer=self.request.user.id).order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', 'live_flag')
      #     tmp_list.append(object_list)

      # article = self.request.GET.get('name')
      # if article is "" or article is None:
      #     article = "選択なし"
      #
      # address = self.request.GET.get('article_address')
      # if address is "" or address is None:
      #     address = '選択なし'
      #
      # floor_list = self.request.GET.getlist('floor')
      # if floor_list == []:
      #     floor = '選択なし'
      # else:
      #     for list_value in floor_list:
      #         floor = list_value
      #
      # room_list = self.request.GET.getlist('room')
      # if room_list == []:
      #     room = '選択なし'
      # else:
      #     for list_value in room_list:
      #         room = list_value
      #
      # live_list = self.request.GET.getlist('live')
      # if live_list == [] :
      #     live = '選択なし'
      # else:
      #     for list_value in live_list:
      #         live = list_value
      #
      # price_list = self.request.GET.getlist('price')
      # if price_list == []:
      #     price = '選択なし'
      # else:
      #     for list_value in price_list:
      #         price = price_list
      #
      # if self.request.user.is_staff is True:
      #     if article is not None or address is not None or floor is not None or room is not None:
      #         object_list = object_list.order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', 'live_flag').filter(
      #                 Q(article_name__contains=article) | Q(address__contains=address)
      #         ).filter(customer=self.request.user.id)
      #         if not object_list:
      #             object_list = object_list.order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', 'live_flag').filter(
      #                 Q(floor_number__contains=floor) | Q(floor_plan__contains=room)
      #             ).filter(customer=self.request.user.id)
      #
      #         if not object_list:
      #             articlelive_list = ArticleLive.objects.all()
      #             for check_live in live:
      #                 if check_live == '0':
      #                     tmp_live = []
      #                     articlelive_list = articlelive_list.filter(vacancy_info=check_live)
      #                     for article_list in articlelive_list:
      #                         print(article_list)
      #                         object_list = self.model.objects.all().filter(
      #                                 customer=self.request.user.id, live_flag=article_list.id
      #                         )
      #
      #
      #                 else:
      #                     articlelive_list = articlelive_list.order_by("id").filter(vacancy_info=check_live)
      #
      #                     for article_list in articlelive_list:
      #                         object_list = self.model.objects.all().filter(
      #                                  customer=self.request.user.id, live_flag=article_list.id
      #                         )
      # else:
      #     if article is not None or address is not None or floor is not None or room is not None:
      #         articlelive_list = ArticleLive.objects.filter(vacancy_info=live)
      #         for article_list in articlelive_list:
      #
      #             object_list = Article.objects.distinct().filter(
      #                     Q(live_flag__exact=article_list.id)| Q(article_name__contains=article) | Q(address__contains=address) |  Q(floor_number__contains=floor) | Q(floor_plan__contains=room)
      #             )
      #
      #             tmp_list.append(object_list)
      #         print(tmp_list)
      #
      #     return object_list
      #     # else:
      #     #     articlelive_list = articlelive_list.filter(vacancy_info=check_live)
      #     #     for article_list in articlelive_list:
      #     #         object_list = Article.objects.filter(
      #     #                  Q(live_flag__exact=article_list.id)| Q(article_name__contains=article) | Q(address__contains=address) |  Q(floor_number__contains=floor) | Q(floor_plan__contains=room)
      #     #         )
      #     #         tmp_list.append(object_list)
      #     #     print(tmp_list)
      #     # else:
      #     #     for price_list in price:
      #     #         if price_list == "1":
      #     #             object_list = Article.objects.filter(
      #     #                      Q(rent__istartswith='1') | Q(rent__istartswith='2')
      #     #             )
      #     #
      #     #         elif price_list == "2":
      #     #             for article_list in articlelive_list:
      #     #                 object_list |= Article.objects.filter(
      #     #                          Q(rent__startswith='3') | Q(rent__startswith='4')
      #     #                 )
      #     #         elif price_list == "3":
      #     #             for article_list in articlelive_list:
      #     #                 object_list |= Article.objects.filter(
      #     #                          Q(rent__startswith='5') | Q(rent__startswith='6')
      #     #                 )
      #     #         elif price_list == "4":
      #     #             for article_list in articlelive_list:
      #     #                 object_list |= Article.objects.filter(
      #     #                          Q(rent__startswith='7') | Q(rent__startswith='8')
      #     #                 )
      #
      #     if self.request.user.is_staff is False:
      #
      #         object_list = self.model.objects.all().order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', "live_flag")
      #         tmp_list.append(object_list)
      #
      #         return object_list
      #
      #     else:
      #         object_list = self.model.objects.all().filter(customer=self.request.user.id).order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', "live_flag")
      #         tmp_list.append(object_list)
      #
      #         return object_list


      else:
                for price_list in price:
                    if price_list == "1":
                        object_list = Article.objects.filter(
                                 Q(rent__istartswith='1') | Q(rent__istartswith='2')
                        )

                    elif price_list == "2":
                        for article_list in articlelive_list:
                            object_list |= Article.objects.filter(
                                     Q(rent__startswith='3') | Q(rent__startswith='4')
                            )
                    elif price_list == "3":
                        for article_list in articlelive_list:
                            object_list |= Article.objects.filter(
                                     Q(rent__startswith='5') | Q(rent__startswith='6')
                            )
                    elif price_list == "4":
                        for article_list in articlelive_list:
                            object_list |= Article.objects.filter(
                                     Q(rent__startswith='7') | Q(rent__startswith='8')
                            )


index.html

-----------
<div class='login_menu'>
  <div class="back_login_botton">
    <a href="#"><span class="css-cancel"></span></a>
  </div> 
  <div class='login_content'>
    <form action="{% url 'register:login' %}" method="POST">
      <div class="col-md-6 offset-md-3">
          <div class="login_card">
              <div class="card-body">
                <div>
                  <label for="title">Welcome</label>
                </div>
                  <input type="text" name="username" placeholder="Email" class="form-control" id="id_username" required="">
                  <hr>
                  <input type="password" name="password" placeholder="パスワード" class="form-control" id="id_password" required="">
                  <hr>
                  <button type="submit" class="btn btn-success btn-lg btn-block" >ログイン</button>
                  {% csrf_token %}
              </div>
          </div>
      </div>
      <div classs='comment'>
        <ul class='note'>
          <li class='forget'><a href="{% url 'register:password_reset' %}">パスワードをお忘れの方</a></li>
          <li class='new_account'>ユーザー登録がまだの方は<a href="{% url 'register:user_create'%}">こちら</a></li>
        </ul>
      </div>
    </form>
  </div>
</div>



index.html

-------

 {% if tmp_list %}
    {% for view_list in page_obj %}
     {% for x in tmp_list %}
      {% if x.id == view_list.id %}
    
        <div class="item box-big{{view_list.id}}">
        {% if user.is_staff is False%}
          {% for fab_selections in fab_selection_list %}
            {% for fab_label in fab_selections %}
              {%if fab_label.id == view_list.id %}
              <div class='ribbon'>
              <span class="ribbon12">★</span>
              <div class='balloon1-top'>
                <p>オススメ！</p>
              </div>
              </div>
              {% endif %}
            {% endfor %}
          {% endfor %}
          {% for date in fab_article %}
            {% if date.id == view_list.id %}
            <div class="ribbon_area">
              <span class="ribbon14">NEW</span>
            </div>
            {% endif %}
          {% endfor %}
        {% endif %}
          <div class='img_item'>
            <div class="hide_text">
              {% if user.is_staff %}
              <p class='text article_name'>{{view_list.article_name}}</p>
              {% else %}
              <p class='text'>{{view_list.comments}}</p>
              {% endif %}
            </div>
            <a href="{%url 'apps:info' view_list.id %}">
              {% if 'http' not in view_list.article_image %}
                <img src="/media/{{view_list.article_image}}" alt="">
              {% else %}
                <img src="{{view_list.article_image}}" alt="">
              {% endif %}
              </a>
          </div>

          <!-- ログイン後の表示画面 -->
          {% if user.is_staff is False%}
            <!-- ログイン前の表示 -->
              {% for article_live in live_table %}
                {% if article_live.article_id == view_list.id %}
                  {% if article_live.vacancy_info == '0' %}
                  <div class='empty_flag'>
                    <span>空室あり</span>
                  </div>
                  {% else %}
                  <div class='empty_flag'>
                    <span>空室なし<br/>{{article_live.vacancy_live}}</span>
                  </div>
                  {% endif %}
                {% endif %}
              {% endfor %}
           {% if user.is_authenticated %}
            {% if not fab_not_view %}
            <form id="fab_id" action="{% url 'apps:get_ajax' %}" method="POST">
              {% csrf_token %}
              <div class="heart">
                <input id="heart" name='fab' type="hidden" value="{{view_list.id}}" />
                <input id="heart" class='fab_bt' type="submit" value="" />
              </div>
            </form>
            {% endif %}
            {% for view in fab_view %}
              {% if view.article_id == view_list.id %}
                {% if view.user_id == user.id %}
                  {% if view.flag == 1 %}
                  <form id='fab_id' action="{% url 'apps:get_ajax'%}" method="POST" >
                    {% csrf_token %}
                    <div class="heart">
                      <input id="heart" name='fab' type="hidden" value="{{view_list.id}}" />
                      <input id="commit" class='fab_bt' type="submit" value="" />
                    </div>
                  </form>
                  {% elif view.flag == 0 %}
                  <form id='fab_id' action="{% url 'apps:get_ajax'%}" method="POST">
                    {% csrf_token %}
                    <div class="heart">
                      <input id="heart" name='fab' type="hidden" value="{{view_list.id}}" />
                      <input id="heart" class='fab_bt' type="submit" value="" />
                    </div>
                  </form>
                  {% else %}
                  <form id='fab_id' action="{% url 'apps:get_ajax'%}" method="POST">
                    {% csrf_token %}
                    <div class="heart">
                      <input id="heart" name='fab' type="hidden" value="{{view_list.id}}" />
                      <input id="heart" class='fab_bt' type="submit" value="" />
                    </div>
                  </form>
                  {% endif %}
                {% endif %}
              {% endif %}
            {% endfor %}
            <form id='fab_id' action="{% url 'apps:get_ajax'%}" method="POST">
              {% csrf_token %}
              <div class="dark">
                <input id="heart" name='fab' type="hidden" value="{{view_list.id}}" />
                <input id="heart" class='fab_bt' type="submit" value="" />
              </div>
            </form>
            {% else %}
            <div class="heart">
              <input id='heart_hidden' class='fab_bt heart' type="submit" value="" />
            </div>
            {% endif %}
          {%else%}
          <div class='update'>
            <button type="button" name="button"><a href="{%url 'apps:update' view_list.id %}">物件編集</a></button>
          </div>
          {% endif %}
        </div>
        
      </div>
    </div>
    {% endif %}
    {% endfor %}
    
    
  {% endfor %}
  {% else %}







upstream websocket {
    server localhost:8000;
}

server {
    listen       80;
    server_name  localhost;

    proxy_read_timeout 5m;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location /static/ {
       root    /var/www/roomii;
    }

    location /media/ {
       root    /var/www/roomii;
    }

    location /ws/chat/ {
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass http://websocket;
    }

    location / {
        root   /var/www/roomii;
        include uwsgi_params;
        proxy_pass http://127.0.0.1:8000;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


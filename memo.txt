from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

from config import *

import os
import sys

from django import *
from django.contrib.messages import *
from django.contrib import *

from django.db import models


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

PROJECT_NAME = os.path.basename(BASE_DIR)

SECRET_KEY = '75c6@w6i1c=xsb$($_117$zk-v!@n*5r9(@tgcj+n=jj+ff*g!'

DEBUG = True

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [

    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'mysite.apps.WebappConfig',
    'mysite',
    # 'social_django',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'social_django.middleware.SocialAuthExceptionMiddleware',
]

# AUTHENTICATION_BACKENDS = [
#     'social_core.backends.open_id.OpenIdAuth',
#     'social_core.backends.google.GoogleOpenId',
#     'social_core.backends.google.GoogleOAuth2',
#     'social_core.backends.google.GoogleOAuth',
#     'django.contrib.auth.backends.ModelBackend',
#     # 'facebook.custom_backends.SettingsBackend',
#     # 'social_core.backends.facebook.FacebookOAuth2',
#
# ]

SESSION_ENGINE = 'django.contrib.sessions.backends.db'


sys.path.append(os.getcwd())

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, "templates")],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    'django.template.context_processors.static',
                    # 'social_django.context_processors.backends',
                    # 'social_django.context_processors.login_redirect',
                ],
            },
        },
    ]

LOGIN_URL = 'register:login'

LOGIN_REDIRECT_URL = 'register:login_after'
LOGOUT_URL = 'register:logout'

sys.path.append(os.getcwd())
WSGI_APPLICATION = 'config.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'roomii_sample',
        'USER': 'root',
        'PASSWORD': 'Asatai951156',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


TIME_ZONE = 'Asia/Tokyo'

LANGUAGE_CODE = 'ja'

USE_I18N = True

USE_L10N = True

USE_TZ = True


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATIC_ROOT = '/var/www/{}/static'.format(PROJECT_NAME)


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AUTH_USER_MODEL = 'mysite.User'

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '991249997158-ns651fs80kdi05dtbaq6e9if081ubq9k.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'eodCVb8XjTTR_sf-41XkJt8g'


FACEBOOK_CALLBACK_URL='http://localhost:8000/auth/complete/facebook/'
# SOCIAL_AUTH_FACEBOOK_APP_NAMESPACE = 'auth'
SOCIAL_AUTH_FACEBOOK_KEY = '292183621408680'
SOCIAL_AUTH_FACEBOOK_SECRET = '1077fcc7e686d3c4ff08fbb05fcc94ab'
# SOCIAL_AUTH_FACEBOOK_SCOPE =  ['email', 'public_profile']
# SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
#   'fields': 'id,name,email'
# }


EMAIL_HOST = 'smtp.muumuu-mail.com'
DEFAULT_FROM_EMAIL = 'official@webapp2.com'
EMAIL_HOST_USER = 'official@webapp2.com'
EMAIL_HOST_PASSWORD = 'asatai951156'
EMAIL_PORT = 587
EMAIL_USE_TLS = False

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'


DATABASE = 'mysql://%s:%s@%s/%s?charset=utf8mb4' % (
    "root",
    "Asatai951156",
    "127.0.0.1:3306",
    "roomii_sample",
)

ENGINE = create_engine(
     DATABASE,
     encoding = "utf8",
     echo=True,
     pool_pre_ping=True
)

session = scoped_session(
    sessionmaker(
        autocommit = False,
        autoflush = False,
        bind = ENGINE
        )
    )

Base = declarative_base()
Base.query = session.query_property()












"""
ajax
"""
{% block extrajs %}

<script>
  // function getCookie(name) {
  //   var cookieValue = null;
  //   if (document.cookie && document.cookie !== '') {
  //     var cookies = document.cookie.split(';');
  //     for (var i = 0; i < cookies.length; i++) {
  //       var cookie = jQuery.trim(cookies[i]);
  //       // Does this cookie string begin with the name we want?
  //       if (cookie.substring(0, name.length + 1) === (name + '=')) {
  //         cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
  //         break;
  //       }
  //     }
  //   }
  //   return cookieValue;
  // }
  //
  // var csrftoken = getCookie('csrftoken');
  //
  // function csrfSafeMethod(method) {
  //     // these HTTP methods do not require CSRF protection
  //     return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
  // }
  //
  // $.ajaxSetup({
  //     beforeSend: function (xhr, settings) {
  //         if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
  //             xhr.setRequestHeader("X-CSRFToken", csrftoken);
  //         }
  //     }
  // });




</script>

{% endblock %}




"""
検索部分, 保存用
"""

# def get_queryset(self):
  #     tmp_list = []

      # if self.request.user.is_staff is False:
      #     object_list = self.model.objects.all().order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', 'live_flag')
      #     tmp_list.append(object_list)
      # else:
      #     object_list = self.model.objects.all().filter(customer=self.request.user.id).order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', 'live_flag')
      #     tmp_list.append(object_list)

      # article = self.request.GET.get('name')
      # if article is "" or article is None:
      #     article = "選択なし"
      #
      # address = self.request.GET.get('article_address')
      # if address is "" or address is None:
      #     address = '選択なし'
      #
      # floor_list = self.request.GET.getlist('floor')
      # if floor_list == []:
      #     floor = '選択なし'
      # else:
      #     for list_value in floor_list:
      #         floor = list_value
      #
      # room_list = self.request.GET.getlist('room')
      # if room_list == []:
      #     room = '選択なし'
      # else:
      #     for list_value in room_list:
      #         room = list_value
      #
      # live_list = self.request.GET.getlist('live')
      # if live_list == [] :
      #     live = '選択なし'
      # else:
      #     for list_value in live_list:
      #         live = list_value
      #
      # price_list = self.request.GET.getlist('price')
      # if price_list == []:
      #     price = '選択なし'
      # else:
      #     for list_value in price_list:
      #         price = price_list
      #
      # if self.request.user.is_staff is True:
      #     if article is not None or address is not None or floor is not None or room is not None:
      #         object_list = object_list.order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', 'live_flag').filter(
      #                 Q(article_name__contains=article) | Q(address__contains=address)
      #         ).filter(customer=self.request.user.id)
      #         if not object_list:
      #             object_list = object_list.order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', 'live_flag').filter(
      #                 Q(floor_number__contains=floor) | Q(floor_plan__contains=room)
      #             ).filter(customer=self.request.user.id)
      #
      #         if not object_list:
      #             articlelive_list = ArticleLive.objects.all()
      #             for check_live in live:
      #                 if check_live == '0':
      #                     tmp_live = []
      #                     articlelive_list = articlelive_list.filter(vacancy_info=check_live)
      #                     for article_list in articlelive_list:
      #                         print(article_list)
      #                         object_list = self.model.objects.all().filter(
      #                                 customer=self.request.user.id, live_flag=article_list.id
      #                         )
      #
      #
      #                 else:
      #                     articlelive_list = articlelive_list.order_by("id").filter(vacancy_info=check_live)
      #
      #                     for article_list in articlelive_list:
      #                         object_list = self.model.objects.all().filter(
      #                                  customer=self.request.user.id, live_flag=article_list.id
      #                         )
      # else:
      #     if article is not None or address is not None or floor is not None or room is not None:
      #         articlelive_list = ArticleLive.objects.filter(vacancy_info=live)
      #         for article_list in articlelive_list:
      #
      #             object_list = Article.objects.distinct().filter(
      #                     Q(live_flag__exact=article_list.id)| Q(article_name__contains=article) | Q(address__contains=address) |  Q(floor_number__contains=floor) | Q(floor_plan__contains=room)
      #             )
      #
      #             tmp_list.append(object_list)
      #         print(tmp_list)
      #
      #     return object_list
      #     # else:
      #     #     articlelive_list = articlelive_list.filter(vacancy_info=check_live)
      #     #     for article_list in articlelive_list:
      #     #         object_list = Article.objects.filter(
      #     #                  Q(live_flag__exact=article_list.id)| Q(article_name__contains=article) | Q(address__contains=address) |  Q(floor_number__contains=floor) | Q(floor_plan__contains=room)
      #     #         )
      #     #         tmp_list.append(object_list)
      #     #     print(tmp_list)
      #     # else:
      #     #     for price_list in price:
      #     #         if price_list == "1":
      #     #             object_list = Article.objects.filter(
      #     #                      Q(rent__istartswith='1') | Q(rent__istartswith='2')
      #     #             )
      #     #
      #     #         elif price_list == "2":
      #     #             for article_list in articlelive_list:
      #     #                 object_list |= Article.objects.filter(
      #     #                          Q(rent__startswith='3') | Q(rent__startswith='4')
      #     #                 )
      #     #         elif price_list == "3":
      #     #             for article_list in articlelive_list:
      #     #                 object_list |= Article.objects.filter(
      #     #                          Q(rent__startswith='5') | Q(rent__startswith='6')
      #     #                 )
      #     #         elif price_list == "4":
      #     #             for article_list in articlelive_list:
      #     #                 object_list |= Article.objects.filter(
      #     #                          Q(rent__startswith='7') | Q(rent__startswith='8')
      #     #                 )
      #
      #     if self.request.user.is_staff is False:
      #
      #         object_list = self.model.objects.all().order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', "live_flag")
      #         tmp_list.append(object_list)
      #
      #         return object_list
      #
      #     else:
      #         object_list = self.model.objects.all().filter(customer=self.request.user.id).order_by('id', 'article_name', 'address', 'floor_number', 'floor_plan', "live_flag")
      #         tmp_list.append(object_list)
      #
      #         return object_list


      else:
                for price_list in price:
                    if price_list == "1":
                        object_list = Article.objects.filter(
                                 Q(rent__istartswith='1') | Q(rent__istartswith='2')
                        )

                    elif price_list == "2":
                        for article_list in articlelive_list:
                            object_list |= Article.objects.filter(
                                     Q(rent__startswith='3') | Q(rent__startswith='4')
                            )
                    elif price_list == "3":
                        for article_list in articlelive_list:
                            object_list |= Article.objects.filter(
                                     Q(rent__startswith='5') | Q(rent__startswith='6')
                            )
                    elif price_list == "4":
                        for article_list in articlelive_list:
                            object_list |= Article.objects.filter(
                                     Q(rent__startswith='7') | Q(rent__startswith='8')
                            )
